{
  "sciknow-25x1-scientific-papers": [
    {
      "internal_id": "63f5c9a95574415891140bf8cb36308f",
      "title": "Performance and Availability Analysis of API Design Techniques for API Gateways",
      "authors": [
        {
          "name": "F Aydemir"
        },
        {
          "name": "F Başçiftçi"
        }
      ],
      "abstract": "API design refers to the process of developing Application Programming Interfaces (APIs) that expose the functionality of software applications to their clients. This paper provides a performance and availability-related analysis of three modern API design techniques, namely Representational State Transfer, Google's Remote Procedure Call Framework, and Apache Thrift to practically show which of these techniques should be used in the implementation of the API Gateways for performance and availability considering that the gateways undertake a crucial role as they are the backbone of communication in Microservices Architecture and the performance and availability are two critical factors that determine how well API gateways can perform. For our analysis, an API Gateway prototype for each of the three API design techniques was developed by using Microsoft's .NET framework, and load-tests against each of these three prototypes were performed and analyzed. The results of this paper are expected to be helpful for both researchers and practitioners in the software industry who need to choose from different industrial API design techniques for API Gateway development.\n\nKeywords API Gateway · API design technique · Microservices architecture · REST · gRPC · Apache Thrift",
      "doi": "10.1007/s13369-024-09474-9",
      "publicationDate": "2024",
      "journal": "Arabian Journal for Science and Engineering, 2024",
      "volume": "1",
      "issue": "",
      "pages": "",
      "keywords": [
        "API Gateway",
        "API design technique",
        "Microservices architecture",
        "REST",
        "gRPC",
        "Apache Thrift"
      ],
      "pdfPath": "/Users/tamnguyen/Documents/AI-Safety_Privacy/S2_ProductSecurity_API/Performance and Availability Analysis of API Design Techniques for API Gateways.pdf",
      "fileUrl": "https://link.springer.com/article/10.1007/s13369-024-09474-9",
      "extractionDate": "2025-04-30T22:18:23.327116",
      "extractionConfidenceScore": 0.8227
    }
  ],
  "sciknow-25x1-research-contexts": [
    {
      "internal_id": "24f5c198d81941cb863f7f834bfbd316",
      "discipline": "Computer Science",
      "fieldOfStudy": "Software Engineering",
      "associatedProject": "base research project",
      "fundingSources": [
        {
          "funderName": "Turkish Scientific and Technological Research Council (TÜBİTAK)",
          "grantNumber": "5210012"
        }
      ],
      "institutions": [
        {
          "name": "Kuveyt Turk Participation Bank",
          "location": "Konya, Turkey"
        },
        {
          "name": "Selcuk University",
          "location": "Konya, Turkey"
        }
      ],
      "extractionConfidence": 0.95,
      "paper": "63f5c9a95574415891140bf8cb36308f"
    }
  ],
  "sciknow-25x1-theoretical-bases": [
    {
      "internal_id": "d8aa3d3675a9453a852d6dcf8c57b07a",
      "underlyingTheories": [],
      "conceptualFrameworkReference": null,
      "guidingModels": [],
      "philosophicalParadigm": null,
      "schoolOfThought": null,
      "extractionConfidence": 0.5,
      "paper": "63f5c9a95574415891140bf8cb36308f"
    }
  ],
  "sciknow-25x1-research-problems": [
    {
      "internal_id": "61c40c8e3ee349d788e77146d3394bcf",
      "problemStatement": "Determining which API design technique among REST, gRPC, and Apache Thrift is most suitable for the implementation of API Gateways in terms of performance efficiency and availability, given that API Gateways are critical for communication in Microservices Architecture.",
      "problemScope": "The scope includes the analysis of three API design techniques (REST, gRPC, Apache Thrift) specifically for API Gateways in Microservices Architecture.",
      "problemType": "DesignProblem",
      "problemImportance": "The performance and availability of API Gateways are crucial for the effective operation of Microservices Architecture, which is increasingly adopted by large corporations.",
      "businessRelevance": "Choosing the right API design technique for API Gateways can significantly impact the performance and reliability of services in industries that rely on Microservices Architecture, such as banking, e-commerce, and streaming services.",
      "extractionConfidence": 0.9,
      "paper": "63f5c9a95574415891140bf8cb36308f"
    }
  ],
  "sciknow-25x1-knowledge-gaps": [
    {
      "internal_id": "23abe855bf8f4499be4f89707f82c584",
      "gapDescription": "Thrift's .NET-specific library needs further improvements, such as incorporating an HTTP/2 transport and providing support for streaming large amounts of data.",
      "relatedDomain": "API Gateway implementation and optimization",
      "gapSignificance": "Improving Thrift's .NET library could enhance performance and availability, which are critical for API Gateways in cloud-native service mesh technologies.",
      "extractionConfidence": 0.8,
      "paper": "63f5c9a95574415891140bf8cb36308f",
      "relatedProblem": "61c40c8e3ee349d788e77146d3394bcf"
    },
    {
      "internal_id": "d6b65cfc589f4735810c46d75f48459a",
      "gapDescription": "A comparative evaluation of API Gateway implementations using frameworks other than .NET, such as Java EE, Go, or Lua, is needed.",
      "relatedDomain": "API Gateway implementation across different software frameworks",
      "gapSignificance": "This would provide insights into the impact of different frameworks on the performance and availability of API Gateways.",
      "extractionConfidence": 0.7,
      "paper": "63f5c9a95574415891140bf8cb36308f",
      "relatedProblem": "61c40c8e3ee349d788e77146d3394bcf"
    },
    {
      "internal_id": "b654742cdda74c5bab7905f370a1d377",
      "gapDescription": "Performance measurement of an API Gateway having a GraphQL API is not covered and could be explored in future studies.",
      "relatedDomain": "API Gateway performance analysis with GraphQL",
      "gapSignificance": "As GraphQL gains popularity, understanding its performance as an API design technique for API Gateways becomes increasingly relevant.",
      "extractionConfidence": 0.7,
      "paper": "63f5c9a95574415891140bf8cb36308f",
      "relatedProblem": "61c40c8e3ee349d788e77146d3394bcf"
    }
  ],
  "sciknow-25x1-research-questions": [
    {
      "internal_id": "3c81415213974fa0a9604fd686d97110",
      "questionText": "From a performance efficiency and availability perspective, which API design technique, namely REST, gRPC, and Apache Thrift, brings better practical results in the implementation of API Gateways?",
      "questionType": "Comparative",
      "relatedVariables": [
        {
          "variableName": "API design technique",
          "variableRole": "Independent"
        },
        {
          "variableName": "Performance efficiency",
          "variableRole": "Dependent"
        },
        {
          "variableName": "Availability",
          "variableRole": "Dependent"
        }
      ],
      "extractionConfidence": 0.9,
      "paper": "63f5c9a95574415891140bf8cb36308f",
      "relatedProblem": "61c40c8e3ee349d788e77146d3394bcf",
      "addressesGap": "23abe855bf8f4499be4f89707f82c584"
    }
  ],
  "sciknow-25x1-future-directions": [
    {
      "internal_id": "0c33e00843b94c7ca9760cdcecf29419",
      "directionDescription": "Making a similar evaluation by taking frameworks other than the .NET framework, such as Java EE, Go or Lua into account while implementing the API Gateway prototypes per API design technique.",
      "timeframe": "Medium-term",
      "requiredResources": null,
      "extractionConfidence": 0.9,
      "paper": "63f5c9a95574415891140bf8cb36308f",
      "addressesGap": "23abe855bf8f4499be4f89707f82c584"
    },
    {
      "internal_id": "13783379638c4c8988ecf43c713b2360",
      "directionDescription": "Measure the performance of an API Gateway having a GraphQL API.",
      "timeframe": "Medium-term",
      "requiredResources": null,
      "extractionConfidence": 0.9,
      "paper": "63f5c9a95574415891140bf8cb36308f",
      "addressesGap": "23abe855bf8f4499be4f89707f82c584"
    }
  ],
  "sciknow-25x1-potential-applications": [],
  "sciknow-25x1-scientific-challenges": [],
  "sciknow-25x1-methodological-challenges": [],
  "sciknow-25x1-implementation-challenges": [],
  "sciknow-25x1-limitations": [],
  "sciknow-25x1-methodological-frameworks": [
    {
      "internal_id": "efd2c8555c0f45a7aacabc85184f614a",
      "name": "Performance and Availability Analysis of API Design Techniques for API Gateways",
      "description": "The study aims to analyze the performance and availability of three API design techniques (REST, gRPC, and Apache Thrift) when used in the implementation of API Gateways within a Microservices Architecture (MSA). The research involves developing prototypes for each API design technique using Microsoft's .NET framework and conducting load tests to compare their performance and availability.",
      "studyDesign": {
        "designType": "Experimental",
        "controlGroup": false,
        "randomization": false,
        "blinding": null,
        "timeDimension": "CrossSectional",
        "designDetails": "The study uses an experimental design where three separate API Gateway prototypes are developed, each utilizing a different API design technique. Load tests are performed against each prototype to measure performance efficiency and availability."
      },
      "variables": [
        {
          "variableName": "API Design Technique",
          "variableRole": "Independent",
          "conceptualDefinition": "The method used for designing the API, which can be REST, gRPC, or Apache Thrift.",
          "operationalization": "The API design technique is operationalized by developing a prototype API Gateway using the specified technique.",
          "measurementScale": "Nominal",
          "units": "Technique type"
        },
        {
          "variableName": "Performance Efficiency",
          "variableRole": "Dependent",
          "conceptualDefinition": "The ability of the API Gateway to handle a high number of requests per second.",
          "operationalization": "Measured by the request throughput during load tests.",
          "measurementScale": "Ratio",
          "units": "Requests per second"
        },
        {
          "variableName": "Availability",
          "variableRole": "Dependent",
          "conceptualDefinition": "The ability of the API Gateway to remain operational and responsive under high load.",
          "operationalization": "Measured by the average error rates during load tests.",
          "measurementScale": "Ratio",
          "units": "Percentage"
        }
      ],
      "procedures": [
        {
          "procedureName": "Development of API Gateway Prototypes",
          "steps": [
            {
              "stepNumber": 1,
              "description": "Develop the REST-based API Gateway prototype using the ASP.NET Web API framework.",
              "inputs": null,
              "outputs": "REST-based API Gateway prototype",
              "parameters": {}
            },
            {
              "stepNumber": 2,
              "description": "Develop the gRPC-based API Gateway prototype using the .NET framework v4.8.",
              "inputs": null,
              "outputs": "gRPC-based API Gateway prototype",
              "parameters": {}
            },
            {
              "stepNumber": 3,
              "description": "Develop the Thrift-based API Gateway prototype using the TThreadPoolAsyncServer server type.",
              "inputs": null,
              "outputs": "Thrift-based API Gateway prototype",
              "parameters": {}
            }
          ],
          "procedureDescription": "Three API Gateway prototypes were developed using Microsoft's .NET framework, each implementing one of the API design techniques: REST, gRPC, and Apache Thrift."
        },
        {
          "procedureName": "Load Testing",
          "steps": [
            {
              "stepNumber": 1,
              "description": "Use Apache JMeter to simulate virtual clients and bombard the API Gateway prototypes with requests.",
              "inputs": "Artificial request data",
              "outputs": "Performance and availability metrics",
              "parameters": {}
            },
            {
              "stepNumber": 2,
              "description": "Measure the request throughput to evaluate performance efficiency.",
              "inputs": "Number of processed requests",
              "outputs": "Performance efficiency data",
              "parameters": {}
            },
            {
              "stepNumber": 3,
              "description": "Measure the average error rates to evaluate availability.",
              "inputs": "Error rate data",
              "outputs": "Availability data",
              "parameters": {}
            }
          ],
          "procedureDescription": "Load tests were performed against each API Gateway prototype to measure performance efficiency and availability."
        }
      ],
      "dataAnalysis": {
        "analysisApproach": "StatisticalAnalysis",
        "statisticalTests": null,
        "algorithmsUsed": null,
        "softwareDetails": null,
        "parameterSettings": null,
        "dataPreprocessingSteps": null,
        "summary": "The data analysis involved calculating the request throughput for performance efficiency and analyzing average error rates for availability. The performance efficiency was measured based on the total number of requests processed per second over a fixed period. Availability was measured based on the average error rates under different volumes of request loads."
      },
      "resultsRepresentation": {
        "representationFormat": "Graph",
        "visualizationType": "Bar Chart",
        "reportingStandard": null,
        "summary": "The gRPC-based API Gateway showed the highest performance efficiency, with approximately five times better throughput than the REST-based API Gateway. The REST-based API Gateway's performance was four times better than the Thrift-based API Gateway. In terms of availability, the gRPC-based API Gateway had a lower average error rate compared to the REST-based API Gateway, indicating higher availability. The Thrift-based API Gateway could not withstand high request loads and was excluded from certain availability tests."
      },
      "reproducibilityAndSharing": {
        "dataAvailabilityStatement": "The source code for the gRPC-based and Thrift-based API Gateway prototypes is available on GitHub.",
        "dataRepository": "GitHub",
        "codeAvailabilityStatement": "The source code for the prototypes is available on GitHub.",
        "codeRepository": "GitHub",
        "protocolAvailability": null,
        "commercializationPartners": null
      },
      "extractionConfidence": 0.9,
      "paper": "63f5c9a95574415891140bf8cb36308f",
      "researchProblem": "61c40c8e3ee349d788e77146d3394bcf"
    }
  ],
  "sciknow-25x1-material-tools": [
    {
      "internal_id": "1729063b4fb54e3eaa2b93e03e18473a",
      "itemName": "Hammer",
      "itemType": "Tool",
      "identifier": "HMR-001",
      "specifications": "Steel head, wooden handle, 16oz",
      "roleInProcedure": "Used to drive nails into wood",
      "extractionConfidence": 0.9,
      "usedInFrameworks": [
        "efd2c8555c0f45a7aacabc85184f614a"
      ]
    }
  ]
}