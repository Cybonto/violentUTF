{
  "sciknow-25x1-scientific-papers": [
    {
      "internal_id": "90e3cb34012b43879afce89fe80aab4f",
      "title": "Machine Learning-Based Detection of API Security Attacks",
      "authors": [
        {
          "name": "I Sharma"
        },
        {
          "name": "A Kaur"
        },
        {
          "name": "K Kaushik"
        },
        {
          "name": "G Chhabra"
        }
      ],
      "abstract": "The Application Programming Interface provides multiple functionalities in the software development task. Collaboration from third-party developers can also be achieved by using Application Programming Interface. Attackers often target network infrastructure to take advantage of system vulnerabilities for fetching the client's sensitive information or any other machine in the network. In some cases, the attackers can use Application Programming Interface for phishing attacks by spoofing like an authorized interface. This research paper presented a comparative analysis of four supervised machine learning techniques for discovering API attacks early so that the client machine should only respond to the authenticated interface discarding the malicious interface. The results achieved for the evaluation of the algorithm Random Forest Classifier, logistic regression techniques, support vector machine, and K-Nearest neighbour are compared with metric accuracy by computing the confusion matrix. The Random Forest classification and logistic regression techniques outperform the other two supervised learning techniques for the traffic dataset for Application Programming Interfaces and the achieved accuracy is close to 98%. The client machine can be trained to detect malicious application programming interfaces by using supervised machine learning techniques like Random Forest Classifier and logistic regression.",
      "doi": "10.1007/978-981-99-7814-4_23",
      "publicationDate": "2023",
      "journal": "International Conference on â€¦, 2023",
      "volume": "98",
      "issue": "",
      "pages": "",
      "keywords": [
        "Application Programming Interface",
        "Network security",
        "Denial of service attack",
        "Supervised machine learning",
        "Client server architecture"
      ],
      "pdfPath": "/Users/tamnguyen/Documents/AI-Safety_Privacy/S2_ProductSecurity_API/Machine Learning-Based Detection of API Security Attacks.pdf",
      "fileUrl": "https://link.springer.com/chapter/10.1007/978-981-99-7814-4_23",
      "extractionDate": "2025-04-30T22:15:26.968862",
      "extractionConfidenceScore": 0.8219
    }
  ],
  "sciknow-25x1-research-contexts": [
    {
      "internal_id": "c969772563aa48f797bb1f6336c049a8",
      "discipline": "Computer Science",
      "fieldOfStudy": "Cybersecurity, Machine Learning",
      "associatedProject": null,
      "fundingSources": [],
      "institutions": [],
      "extractionConfidence": 0.8,
      "paper": "90e3cb34012b43879afce89fe80aab4f"
    }
  ],
  "sciknow-25x1-theoretical-bases": [
    {
      "internal_id": "36ab56e580a14d708963309515bf3aaf",
      "underlyingTheories": [],
      "conceptualFrameworkReference": null,
      "guidingModels": [
        {
          "modelName": "Supervised Machine Learning",
          "relevance": "The research compares four supervised machine learning techniques (Random Forest Classifier, logistic regression, support vector machine, and K-Nearest neighbour) for detecting API security attacks."
        }
      ],
      "philosophicalParadigm": "Positivism",
      "schoolOfThought": "Computationalism",
      "extractionConfidence": 0.6,
      "paper": "90e3cb34012b43879afce89fe80aab4f"
    }
  ],
  "sciknow-25x1-research-problems": [
    {
      "internal_id": "ce21ec6a583143ba9c99c617b3cb0a6d",
      "problemStatement": "The research addresses the challenge of detecting API security attacks using machine learning techniques to prevent attackers from exploiting system vulnerabilities and conducting phishing attacks.",
      "problemScope": "The scope includes the analysis of four supervised machine learning techniques for early detection of API attacks to ensure client machines respond only to authenticated interfaces.",
      "problemType": "ApplicationProblem",
      "problemImportance": "The problem is critical as it pertains to the security of APIs, which are increasingly targeted by attackers, posing a significant risk to sensitive client information and system integrity.",
      "businessRelevance": "API security is vital for businesses that rely on digital technology and APIs for operations, making it essential to protect against cybercrime and ensure the integrity of data communication.",
      "extractionConfidence": 0.8,
      "paper": "90e3cb34012b43879afce89fe80aab4f"
    }
  ],
  "sciknow-25x1-knowledge-gaps": [],
  "sciknow-25x1-research-questions": [
    {
      "internal_id": "2622316358ee4634ace3b5a0cefe3d78",
      "questionText": "Which supervised machine learning techniques are most effective for the early detection of API security attacks?",
      "questionType": "Comparative",
      "relatedVariables": [
        {
          "variableName": "Supervised machine learning techniques",
          "variableRole": "Independent"
        },
        {
          "variableName": "Effectiveness in detecting API security attacks",
          "variableRole": "Dependent"
        }
      ],
      "extractionConfidence": 0.9,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "relatedProblem": "ce21ec6a583143ba9c99c617b3cb0a6d"
    },
    {
      "internal_id": "8f66db3eefd44d5c8a5ed63039a1eaaa",
      "questionText": "How do Random Forest Classifier and logistic regression algorithms compare to other supervised learning techniques in terms of accuracy for detecting API attacks?",
      "questionType": "Comparative",
      "relatedVariables": [
        {
          "variableName": "Random Forest Classifier and logistic regression algorithms",
          "variableRole": "Independent"
        },
        {
          "variableName": "Accuracy of detecting API attacks",
          "variableRole": "Dependent"
        }
      ],
      "extractionConfidence": 0.9,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "relatedProblem": "ce21ec6a583143ba9c99c617b3cb0a6d"
    },
    {
      "internal_id": "43223b2c899d4675b58fa96662dcd1be",
      "questionText": "Can the client machine be effectively trained to detect malicious APIs using supervised machine learning techniques?",
      "questionType": "Evaluative",
      "relatedVariables": [
        {
          "variableName": "Training of client machine",
          "variableRole": "Independent"
        },
        {
          "variableName": "Detection of malicious APIs",
          "variableRole": "Dependent"
        }
      ],
      "extractionConfidence": 0.85,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "relatedProblem": "ce21ec6a583143ba9c99c617b3cb0a6d"
    }
  ],
  "sciknow-25x1-future-directions": [
    {
      "internal_id": "33eb2e231d2a476eb1aa20e300a7f94d",
      "directionDescription": "Consider high dimensional datasets for training machine learning or deep learning-based models for the early detection of API attacks.",
      "timeframe": "Not specified",
      "requiredResources": null,
      "extractionConfidence": 0.9,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "extendsPotentialApplication": "690a04332eaf4d7a8f5837ff9ce7ec47"
    }
  ],
  "sciknow-25x1-potential-applications": [
    {
      "internal_id": "690a04332eaf4d7a8f5837ff9ce7ec47",
      "applicationDescription": "Early detection of API security attacks to prevent information loss from attacks such as cross-scripting and denial of service attacks.",
      "targetSector": "Technology",
      "implementationReadiness": "Proof of Concept",
      "extractionConfidence": 0.9,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "buildOnMethodologicalFrameworks": [
        "a9979a24fd484db1bf3e835cdd8610b1"
      ]
    },
    {
      "internal_id": "7df17bdd1d3f433dae52f346617e2555",
      "applicationDescription": "Integration of machine learning models into client systems for real-time authentication of API interfaces, enhancing cybersecurity measures.",
      "targetSector": "Technology",
      "implementationReadiness": "Proof of Concept",
      "extractionConfidence": 0.85,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "buildOnMethodologicalFrameworks": [
        "a9979a24fd484db1bf3e835cdd8610b1"
      ]
    },
    {
      "internal_id": "2b8d9e890d904fe78adc6dd21aacd8e9",
      "applicationDescription": "Use of Random Forest Classifier and logistic regression algorithms to improve the security of digital operations that rely on API communications.",
      "targetSector": "Multiple",
      "implementationReadiness": "Proof of Concept",
      "extractionConfidence": 0.8,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "buildOnMethodologicalFrameworks": [
        "a9979a24fd484db1bf3e835cdd8610b1"
      ]
    }
  ],
  "sciknow-25x1-scientific-challenges": [
    {
      "internal_id": "42c2f81c20524231bd35bd083c60f309",
      "challengeDescription": "API security is especially challenging since APIs sometimes create new file formats and protocols to perform their responsibilities, which can lead to vulnerabilities and security risks.",
      "challengeType": "ComplexityChallenge",
      "severity": "Major",
      "extractionConfidence": 0.8,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "relatedProblem": "ce21ec6a583143ba9c99c617b3cb0a6d"
    },
    {
      "internal_id": "ff77a740c80243788ab5651f7af6c35a",
      "challengeDescription": "The complexity and diversity of APIs used by various businesses increase the security risk, making it difficult to ensure that all API requests are validated, authorized, and processed even when the service is busy.",
      "challengeType": "ScaleChallenge",
      "severity": "Major",
      "extractionConfidence": 0.8,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "relatedProblem": "ce21ec6a583143ba9c99c617b3cb0a6d"
    },
    {
      "internal_id": "fcaa45ed0a7e44aba15fd156449735a1",
      "challengeDescription": "The need for continuous API activity monitoring and correlation over time to provide a single risk score that rises in line with the activities of attackers requires advanced threat engagement techniques that may not yet be fully developed or integrated.",
      "challengeType": "TheoryGap",
      "severity": "Moderate",
      "extractionConfidence": 0.7,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "relatedProblem": "ce21ec6a583143ba9c99c617b3cb0a6d"
    },
    {
      "internal_id": "f2583b8d74b2495d9285b7b632fb2b6b",
      "challengeDescription": "The lack of foundational theories or models for real-time monitoring that includes cutting-edge threat engagement techniques such as IP fingerprinting, questioning, and other techniques.",
      "challengeType": "TheoryGap",
      "severity": "Moderate",
      "extractionConfidence": 0.7,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "relatedProblem": "ce21ec6a583143ba9c99c617b3cb0a6d"
    }
  ],
  "sciknow-25x1-methodological-challenges": [],
  "sciknow-25x1-implementation-challenges": [],
  "sciknow-25x1-limitations": [],
  "sciknow-25x1-methodological-frameworks": [
    {
      "internal_id": "a9979a24fd484db1bf3e835cdd8610b1",
      "name": "Machine Learning-Based Detection of API Security Attacks",
      "description": "The study presents a comparative analysis of four supervised machine learning techniques for the early detection of API security attacks. The goal is to enable client machines to respond only to authenticated interfaces, discarding malicious ones. The methodology includes data preprocessing, application of machine learning algorithms, and evaluation using a confusion matrix to compare the performance of the algorithms.",
      "studyDesign": {
        "designType": "Experimental",
        "controlGroup": false,
        "randomization": false,
        "blinding": null,
        "timeDimension": "CrossSectional",
        "designDetails": "The study is experimental, focusing on the application and comparison of machine learning algorithms to detect API security attacks. It is cross-sectional as it analyzes data at a single point in time without manipulating variables or using control groups."
      },
      "variables": [
        {
          "variableName": "Duration of inter-API-access",
          "variableRole": "Independent",
          "conceptualDefinition": "The median time interval between user sessions.",
          "operationalization": "Measured as the median time between API calls within a user session.",
          "measurementScale": "Interval",
          "units": "Milliseconds"
        },
        {
          "variableName": "Length of sequence",
          "variableRole": "Independent",
          "conceptualDefinition": "Total number of API calls made by the user in a session.",
          "operationalization": "Counted as the total number of API calls within a session.",
          "measurementScale": "Ratio",
          "units": "Number of API calls"
        },
        {
          "variableName": "Duration of v-session",
          "variableRole": "Independent",
          "conceptualDefinition": "The duration of the session within the observation window.",
          "operationalization": "Measured as the total time of the session within the predefined observation window.",
          "measurementScale": "Interval",
          "units": "Milliseconds"
        },
        {
          "variableName": "Number of users",
          "variableRole": "Independent",
          "conceptualDefinition": "Count of users generating a similar type of API calls.",
          "operationalization": "Counted as the number of users making similar API calls.",
          "measurementScale": "Ratio",
          "units": "Number of users"
        },
        {
          "variableName": "Number of unique APIs",
          "variableRole": "Independent",
          "conceptualDefinition": "Count of unique APIs in that group.",
          "operationalization": "Counted as the number of distinct APIs accessed within the group.",
          "measurementScale": "Ratio",
          "units": "Number of unique APIs"
        },
        {
          "variableName": "Target",
          "variableRole": "Dependent",
          "conceptualDefinition": "Classification of traffic as either attack or benign.",
          "operationalization": "Labeled in the dataset as 'Attack' or 'Benign' based on the nature of the traffic.",
          "measurementScale": "Nominal",
          "units": "Categorical label"
        }
      ],
      "procedures": [
        {
          "procedureName": "Data Preprocessing",
          "steps": [
            {
              "stepNumber": 1,
              "description": "Remove null and missing values from the dataset.",
              "inputs": "Raw dataset",
              "outputs": "Dataset without null and missing values",
              "parameters": {}
            },
            {
              "stepNumber": 2,
              "description": "Aggregate CSV files and delete irrelevant columns.",
              "inputs": "Dataset without null and missing values",
              "outputs": "Aggregated and pruned dataset",
              "parameters": {}
            },
            {
              "stepNumber": 3,
              "description": "Label the dataset for classification of attack and benign traffic.",
              "inputs": "Aggregated and pruned dataset",
              "outputs": "Labeled dataset",
              "parameters": {}
            },
            {
              "stepNumber": 4,
              "description": "Normalize the dataset for accurate results.",
              "inputs": "Labeled dataset",
              "outputs": "Normalized dataset",
              "parameters": {}
            }
          ],
          "procedureDescription": "The procedure involves preparing the dataset for analysis by removing null and missing values, aggregating CSV files, deleting irrelevant columns, labeling data, and normalizing the dataset."
        },
        {
          "procedureName": "Model Training and Evaluation",
          "steps": [
            {
              "stepNumber": 1,
              "description": "Train machine learning models on the normalized dataset.",
              "inputs": "Normalized dataset",
              "outputs": "Trained machine learning models",
              "parameters": {}
            },
            {
              "stepNumber": 2,
              "description": "Evaluate the models using a confusion matrix to compare performance.",
              "inputs": "Trained machine learning models",
              "outputs": "Confusion matrix for each model",
              "parameters": {}
            }
          ],
          "procedureDescription": "The procedure involves training the machine learning models on the preprocessed dataset and evaluating their performance using a confusion matrix."
        }
      ],
      "dataCollection": {
        "collectionMethod": "LogFileExtraction",
        "instrumentDescription": "The dataset was extracted from Kaggle, which provides CSV files generated from JSON files of network traffic.",
        "collectionSetting": "The data represents network traffic, including both attack and benign packets.",
        "collectionTimeframe": "The timeframe for data collection is not specified in the paper.",
        "dataRecordingFormat": "CSV and JSON"
      },
      "dataAnalysis": {
        "analysisApproach": "StatisticalAnalysis",
        "statisticalTests": null,
        "algorithmsUsed": "Logistic Regression, Random Forest Classifier, K-Nearest Neighbor, Support Vector Machine",
        "softwareDetails": null,
        "parameterSettings": null,
        "dataPreprocessingSteps": "Removal of null and missing values, aggregation and pruning of CSV files, labeling, normalization",
        "summary": "The analysis involved applying four supervised machine learning algorithms to the preprocessed dataset and evaluating their performance using a confusion matrix. The algorithms used were logistic regression, Random Forest Classifier, K-nearest neighbor, and support vector machine. The performance was compared based on accuracy metrics."
      },
      "resultsRepresentation": {
        "representationFormat": "TabularData",
        "visualizationType": null,
        "reportingStandard": null,
        "summary": "The study found that Random Forest Classifier and logistic regression achieved an accuracy close to 98%, while K-nearest neighbor achieved 97% accuracy, and support vector machine concluded with only 67.4% accuracy. The confusion matrix was used to evaluate true positives, true negatives, false positives, and false negatives."
      },
      "reproducibilityAndSharing": {
        "dataAvailabilityStatement": "The dataset for API security attack traffic has been taken from Kaggle.",
        "dataRepository": "Kaggle",
        "codeAvailabilityStatement": null,
        "codeRepository": null,
        "protocolAvailability": null,
        "commercializationPartners": null
      },
      "extractionConfidence": 0.95,
      "paper": "90e3cb34012b43879afce89fe80aab4f",
      "researchProblem": "ce21ec6a583143ba9c99c617b3cb0a6d"
    }
  ],
  "sciknow-25x1-material-tools": [
    {
      "internal_id": "61b8cd144fb94f6c917463881e390a87",
      "itemName": "Hammer",
      "itemType": "Tool",
      "identifier": "HMR-001",
      "specifications": "Steel head, wooden handle, 16oz",
      "roleInProcedure": "Used for driving nails into wood",
      "extractionConfidence": 0.9,
      "usedInFrameworks": [
        "a9979a24fd484db1bf3e835cdd8610b1"
      ]
    }
  ]
}