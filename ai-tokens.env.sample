# AI Provider Tokens and Settings
# Set to true/false to enable/disable providers
# Add your actual API keys replacing the placeholder values

# OpenAI Configuration
OPENAI_ENABLED=false
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic Configuration
ANTHROPIC_ENABLED=false
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Ollama Configuration (local, no API key needed)
OLLAMA_ENABLED=true
OLLAMA_ENDPOINT=http://localhost:11434/v1/chat/completions

# Open WebUI Configuration
OPEN_WEBUI_ENABLED=false
OPEN_WEBUI_ENDPOINT=http://localhost:3000/ollama/v1/chat/completions
OPEN_WEBUI_API_KEY=your_open_webui_api_key_here

# Amazon Bedrock Configuration
BEDROCK_ENABLED=true
BEDROCK_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_aws_access_key_here
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key_here
AWS_SESSION_TOKEN=your_aws_session_token_here_if_using_temp_credentials

# OpenAPI Provider Configuration
# Support for generic OpenAPI-compliant endpoints
# You can configure up to 10 OpenAPI providers (OPENAPI_1 through OPENAPI_10)
OPENAPI_ENABLED=false

# OpenAPI Provider 1 - Example with Bearer Token Authentication
OPENAPI_1_ENABLED=false
OPENAPI_1_ID=custom-api-1                              # Unique identifier (no spaces, used in routes)
OPENAPI_1_NAME="Custom API Provider 1"                 # Display name shown in UI
OPENAPI_1_BASE_URL=https://api.example.com            # Base URL of your API
OPENAPI_1_SPEC_PATH=/openapi.json                     # Path to OpenAPI specification
OPENAPI_1_AUTH_TYPE=bearer                            # Authentication type: bearer, api_key, or basic
OPENAPI_1_AUTH_TOKEN=your_bearer_token_here           # Bearer token for authentication
# Optional: Custom headers (comma-separated key:value pairs)
OPENAPI_1_CUSTOM_HEADERS=""

# OpenAPI Provider 2 - Example with API Key Authentication
OPENAPI_2_ENABLED=false
OPENAPI_2_ID=internal-api
OPENAPI_2_NAME="Internal AI Service"
OPENAPI_2_BASE_URL=https://internal.company.com/ai/v1
OPENAPI_2_SPEC_PATH=/swagger.json                     # Also supports swagger.json
OPENAPI_2_AUTH_TYPE=api_key
OPENAPI_2_API_KEY=your_api_key_here
OPENAPI_2_API_KEY_HEADER=X-API-Key                    # Header name for API key (default: X-API-Key)
OPENAPI_2_CUSTOM_HEADERS=""

# OpenAPI Provider 3 - Example with Basic Authentication
OPENAPI_3_ENABLED=false
OPENAPI_3_ID=legacy-api
OPENAPI_3_NAME="Legacy API System"
OPENAPI_3_BASE_URL=https://legacy.system.com
OPENAPI_3_SPEC_PATH=/api-docs/openapi.yaml           # Supports both JSON and YAML
OPENAPI_3_AUTH_TYPE=basic
OPENAPI_3_BASIC_USERNAME=username
OPENAPI_3_BASIC_PASSWORD=password
OPENAPI_3_CUSTOM_HEADERS=""

# Add more providers as needed following the same pattern
# Maximum supported: 10 providers (OPENAPI_1 through OPENAPI_10)
#
# Common OpenAPI spec paths:
#   /openapi.json
#   /swagger.json
#   /v3/api-docs
#   /api-docs
#   /api/v1/openapi.json
#
# After configuration:
# 1. Run ./setup_macos.sh to import endpoints
# 2. Your OpenAPI providers will appear as "openapi-{id}" in the UI
# 3. All discovered operations will be available as models
