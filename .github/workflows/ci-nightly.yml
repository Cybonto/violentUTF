name: Nightly CI

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      comprehensive:
        description: 'Run comprehensive tests'
        type: boolean
        default: true

permissions:
  contents: read
  issues: write
  security-events: write

jobs:
  # Extended multi-platform matrix testing
  extended-test-matrix:
    name: Extended Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, macos-13, macos-12, windows-2022, windows-2019]
        python-version: ["3.10", "3.11", "3.12", "3.13-dev"]
        exclude:
          # Exclude older OS with newer Python
          - os: ubuntu-20.04
            python-version: "3.13-dev"
          - os: macos-12
            python-version: "3.13-dev"
          - os: windows-2019
            python-version: "3.13-dev"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install all dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r violentutf/requirements.txt
          pip install -r violentutf_api/fastapi_app/requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-timeout pytest-benchmark

      - name: Run comprehensive test suite
        run: |
          pytest tests/ -v --tb=short \
            --cov=violentutf --cov=violentutf_api \
            --cov-report=xml:coverage-${{ matrix.os }}-${{ matrix.python-version }}.xml \
            --cov-report=html:htmlcov-${{ matrix.os }}-${{ matrix.python-version }} \
            --junit-xml=junit-${{ matrix.os }}-${{ matrix.python-version }}.xml \
            --benchmark-only \
            --benchmark-autosave \
            -n auto \
            --timeout=600

      - name: Upload coverage reports
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            coverage-*.xml
            htmlcov-*/
          retention-days: 30

  # Performance benchmarking
  performance-benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies with benchmark tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r violentutf/requirements.txt
          pip install -r violentutf_api/fastapi_app/requirements.txt
          pip install pytest pytest-benchmark py-spy memory-profiler

      - name: Run performance benchmarks
        run: |
          # Run benchmarks
          pytest tests/benchmarks -v \
            --benchmark-only \
            --benchmark-autosave \
            --benchmark-compare \
            --benchmark-histogram=benchmark_hist \
            --benchmark-json=benchmark_results.json

      - name: Profile memory usage
        run: |
          # Memory profiling for key components
          python -m memory_profiler tests/profile_memory.py > memory_profile.txt || true

      - name: Generate performance report
        run: |
          python scripts/generate_performance_report.py \
            --benchmark-file benchmark_results.json \
            --memory-file memory_profile.txt \
            --output performance_report.md || true

      - name: Upload performance artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: performance-reports
          path: |
            benchmark_*.json
            benchmark_hist/
            memory_profile.txt
            performance_report.md
          retention-days: 90

  # Comprehensive security analysis
  comprehensive-security:
    name: Comprehensive Security Analysis
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: "3.11"

      - name: Run Semgrep analysis
        uses: returntocorp/semgrep-action@c36e05e6e0e5fa3025f59a018e74c94ab72b999e # v1
        with:
          config: >-
            p/python
            p/security-audit
            p/owasp-top-ten
            p/r2c-security-audit
          generateSarif: true

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@407ffafae6a767df3e0230c3df91b6443ae8df75 # v2.22.8
        with:
          sarif_file: semgrep.sarif

      - name: Run GitLeaks secret scanning
        uses: zricethezav/gitleaks-action@7737b2acafdb2eab1ec5ec6d296e07dd3a4d7b2b # v2.3.2
        with:
          config-path: .gitleaks.toml
          report-format: sarif

      - name: Detect secrets with detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --force-use-all-plugins > secrets-baseline.json || true
          detect-secrets audit secrets-baseline.json --report --json > secrets-report.json || true

      - name: OWASP Dependency Check
        uses: jeremylong/DependencyCheck-Action@1cf96e3e1a982eff25e7fe5c98c6f0b3b91e9dc5 # main
        with:
          project: 'ViolentUTF'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload security reports
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: security-analysis-reports
          path: |
            semgrep.sarif
            secrets-*.json
            dependency-check-report.*
          retention-days: 90

  # Full integration test suite
  full-integration-tests:
    name: Full Integration Tests
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Start all services
        run: |
          docker compose -f docker-compose.yml up -d
          
          # Wait for all services
          echo "Waiting for services to be healthy..."
          sleep 30
          
          # Health checks
          ./scripts/check_services.sh || exit 1

      - name: Set up Python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: "3.11"

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r violentutf/requirements.txt
          pip install -r violentutf_api/fastapi_app/requirements.txt
          pip install pytest pytest-timeout requests selenium

      - name: Run full integration test suite
        run: |
          # Export required environment variables
          export KEYCLOAK_URL=http://localhost:8080
          export APISIX_URL=http://localhost:9080
          export FASTAPI_URL=http://localhost:8000
          export STREAMLIT_URL=http://localhost:8501
          
          # Run all integration tests
          pytest tests/integration -v --tb=short \
            --timeout=1200 \
            --junit-xml=integration-test-results.xml

      - name: Run E2E tests
        run: |
          pytest tests/e2e -v --tb=short \
            --timeout=1800 \
            --junit-xml=e2e-test-results.xml || true

      - name: Collect logs
        if: always()
        run: |
          mkdir -p logs
          docker compose logs > logs/docker-compose.log
          docker compose ps > logs/docker-services.txt

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: integration-test-results
          path: |
            *-test-results.xml
            logs/
          retention-days: 30

  # Dependency update check
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: "3.11"

      - name: Check for outdated dependencies
        run: |
          pip install pip-tools safety
          
          # Check each requirements file
          for req_file in $(find . -name "requirements*.txt"); do
            echo "Checking $req_file..."
            pip list --outdated --format=json > outdated_$(basename $req_file).json
          done
          
          # Security check on dependencies
          safety check --json --output safety-nightly.json || true

      - name: Generate dependency report
        run: |
          python scripts/generate_dependency_report.py \
            --outdated-files "outdated_*.json" \
            --safety-file safety-nightly.json \
            --output dependency-report.md || echo "No report generator found"

      - name: Upload dependency reports
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: dependency-reports
          path: |
            outdated_*.json
            safety-nightly.json
            dependency-report.md
          retention-days: 30

  # Create summary issue if failures
  nightly-summary:
    name: Nightly CI Summary
    runs-on: ubuntu-22.04
    needs: [
      extended-test-matrix,
      performance-benchmark,
      comprehensive-security,
      full-integration-tests,
      dependency-updates
    ]
    if: failure()
    
    steps:
      - name: Create failure issue
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const title = `Nightly CI Failure - ${date}`;
            
            let body = `## Nightly CI Run Failed\n\n`;
            body += `**Date**: ${date}\n`;
            body += `**Run**: ${context.runId}\n\n`;
            body += `### Failed Jobs\n\n`;
            
            const jobs = [
              { name: 'Extended Tests', status: '${{ needs.extended-test-matrix.result }}' },
              { name: 'Performance', status: '${{ needs.performance-benchmark.result }}' },
              { name: 'Security', status: '${{ needs.comprehensive-security.result }}' },
              { name: 'Integration', status: '${{ needs.full-integration-tests.result }}' },
              { name: 'Dependencies', status: '${{ needs.dependency-updates.result }}' }
            ];
            
            for (const job of jobs) {
              if (job.status === 'failure') {
                body += `- ❌ ${job.name}\n`;
              }
            }
            
            body += `\n[View Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
            
            // Check if issue already exists for today
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'nightly-ci',
              state: 'open'
            });
            
            const existingIssue = issues.find(issue => issue.title === title);
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['nightly-ci', 'automated']
              });
            }