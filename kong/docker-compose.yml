version: '3.9'

x-kong-config:
  &kong-env
  # KONG_DATABASE defaults to 'off' for db-less mode by default.
  # When using the 'database' profile, you typically set KONG_DATABASE=postgres as an environment variable
  # when running 'docker compose up', e.g., KONG_DATABASE=postgres docker compose --profile database up -d
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  kong-net:
    external: false

services:
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong/kong-gateway:3.10.0.1}" # Pinned Kong version
    command: kong migrations bootstrap
    profiles: [ "database" ]
    depends_on:
      db: # Added explicit service dependency condition
        condition: service_healthy
    environment:
      <<: *kong-env
      # Ensure KONG_DATABASE is effectively 'postgres' when this service runs
      KONG_DATABASE: postgres
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong/kong-gateway:3.10.0.1}" # Pinned Kong version
    command: kong migrations up && kong migrations finish
    profiles: [ "database" ]
    depends_on:
      db: # Added explicit service dependency condition
        condition: service_healthy
    environment:
      <<: *kong-env
      # Ensure KONG_DATABASE is effectively 'postgres' when this service runs
      KONG_DATABASE: postgres
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong/kong-gateway:3.10.0.1}" # Pinned Kong version
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000, 0.0.0.0:8443 ssl}"
      # Kong Admin API listens on all interfaces within the container,
      # but host port mapping will restrict to 127.0.0.1 on the host.
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001, 0.0.0.0:8444 ssl}"
      # Kong Manager GUI listens on all interfaces within the container,
      # host port mapping restricts to 127.0.0.1 on the host.
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      # KONG_ADMIN_GUI_LISTEN_SSL for HTTPS Manager: "${KONG_ADMIN_GUI_LISTEN_SSL:-0.0.0.0:8445 ssl}"
      KONG_ADMIN_GUI_URL: "${KONG_ADMIN_GUI_URL:-http://localhost:8002}" # URL to access Kong Manager
      KONG_ADMIN_GUI_AUTH_CONF: '{"credentials": [{"id":"1", "username": "kong_manager_admin", "password": "YourSecurePasswordForKongManager!"}]}'
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
      KONG_ENFORCE_RBAC: "${KONG_ENFORCE_RBAC:-on}" # Enable RBAC by default
      KONG_ADMIN_GUI_AUTH: "${KONG_ADMIN_GUI_AUTH:-basic-auth}" # Use basic-auth for Kong Manager
      # Session config for Kong Manager. CHANGE THE SECRET!
      # For basic-auth, this is used for the session cookie after initial auth.
      # If KONG_ADMIN_GUI_LISTEN uses SSL and is accessed via HTTPS, set cookie_secure: true
      KONG_ADMIN_GUI_SESSION_CONF: '{"secret":"your-actual-secret-here", "storage":"kong", "cookie_secure": false, "cookie_samesite":"Strict", "cookie_name":"kong_manager_session"}'
      KONG_LOG_LEVEL: "${KONG_LOG_LEVEL:-info}" # Default log level
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      # Proxy ports - KONG_INBOUND_PROXY_LISTEN & KONG_INBOUND_SSL_PROXY_LISTEN are custom vars from original file,
      # used here to determine the host IP for proxy ports. Default to 0.0.0.0.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"

      # Admin API ports - restricted to 127.0.0.1 (localhost) on the host machine
      - "127.0.0.1:8001:8001/tcp" # Admin API HTTP
      - "127.0.0.1:8444:8444/tcp" # Admin API HTTPS

      # Kong Manager GUI port - restricted to 127.0.0.1 (localhost) on the host machine
      - "127.0.0.1:8002:8002/tcp" # Kong Manager HTTP
      # If enabling Kong Manager over HTTPS (e.g. on container port 8445 via KONG_ADMIN_GUI_LISTEN_SSL):
      # - "127.0.0.1:8445:8445/tcp" # Kong Manager HTTPS
    healthcheck:
      test: [ "CMD-SHELL", "kong health" ] # CMD-SHELL for commands with args
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./config:/opt/kong # For declarative configuration
    security_opt:
      - no-new-privileges
    depends_on: # Ensure Kong starts after migrations are attempted (if db profile is active)
        kong-migrations:
            condition: service_completed_successfully
            required: false # Make it optional so db-less mode still works
        kong-migrations-up:
            condition: service_completed_successfully
            required: false # Make it optional

  db:
    image: postgres:16 # Upgraded PostgreSQL version
    profiles: [ "database" ]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d ${KONG_PG_DATABASE:-kong} -U ${KONG_PG_USER:-kong}"
        ]
      interval: 10s # Faster interval for quicker startup dependency resolution
      timeout: 5s
      retries: 5
    restart: on-failure
    stdin_open: true # Keep as in original if needed for exec interaction
    tty: true        # Keep as in original
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD